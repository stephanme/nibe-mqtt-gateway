{
    "mqtt": {
        "brokerUri": "mqtt://mosquitto.fritz.box", // required
        "user": "mqtt",
        "password": "****",
        // optional config with defaults
        "clientId": "<hostname>-<mac>",
        "rootTopic": "nibegw",
        "discoveryPrefix": "homeassistant",
        "deviceName": "Nibe GW",
        "deviceManufacturer": "Nibe",
        "deviceModel": "Heatpump",
        "deviceConfigurationUrl": "http://nibegw.fritz.box"
    },
    "nibe": {
        // list of coil ids to poll every 30s
        // 1 coils takes ~1s
        "coilsToPoll": [44302, 44308, 44300, 44306, 44298, 44069, 44071, 44073, 40737],

        // Prometheus metrics for coils: metric = value * scale / factor
        "metrics": {
            /*
            Format:
            "<coid id>": { 
                "name":"<metric name including attributes>",    // default: nibe_<metric title>{coil="<coil id>"}, coil attribute is always added
                "factor": <factor>,                             // default: factor from nibe-modbus.csv
                "scale": <scaling>                              // default: 1
                "counter": true|false                           // default: false
                                                                // counter=true skips new values if they are less than last know metric value
                                                                // counter metrics must not decrease (unless they are reset), nibe heat meter was observed to decrease during defrosting
            }
            */
            // coils sent automatically as data message, configured in ModbusManager (LOG.SET file)
            // max 20 coils, only 8 and 16 bit data types supported (u8, s8, u16, s16)
            "45001": { "name":"nibe_alarm"},
            "40004": { "name":"nibe_outdoor_temperature_celsius{sensor=\"BT1\"}"},
            "40067": { "name":"nibe_outdoor_temperature_celsius{sensor=\"BT1 avg\"}"},
            "40013": { "name":"nibe_hotwater_temperature_celsius{sensor=\"BT7 top\"}"},
            "40014": { "name":"nibe_hotwater_temperature_celsius{sensor=\"BT6 load\"}"},
            "43009": { "name":"nibe_heat_medium_temperature_celsius{sensor=\"calculated\"}"},
            "40008": { "name":"nibe_heat_medium_temperature_celsius{sensor=\"BT2 supply\"}"},
            "40012": { "name":"nibe_heat_medium_temperature_celsius{sensor=\"BT3 return\"}"},
            "44055": { "name":"nibe_heat_medium_temperature_celsius{sensor=\"EB101-BT3 return\"}"},
            "44058": { "name":"nibe_heat_medium_temperature_celsius{sensor=\"EB101-BT12 condensor out\"}"},
            "43437": { "name":"nibe_heat_medium_pump_speed_percent{sensor=\"EP14\"}"},
            "40072": { "name":"nibe_heat_medium_flow_liter_per_min{sensor=\"BF1 EP14\"}"},
            "43005": { "name":"nibe_degree_minutes"},
            "44701": { "name":"nibe_compressor_frequency_hertz{sensor=\"EB101 actual\"}"},
            "44703": { "name":"nibe_defrosting{sensor=\"EB101-EP14\"}"},
            "44396": { "name":"nibe_charge_pump_speed_percent{sensor=\"EB101\"}"},
            "44874": { "name":"nibe_sg_ready"},

            // polled coils
            "44302": { "name":"nibe_heat_meter_wh_total{sensor=\"EP14 cooling cpr\"}", "factor": 1, "scale": 100, "counter": true},
            "44308": { "name":"nibe_heat_meter_wh_total{sensor=\"EP14 heating cpr\"}", "factor": 1, "scale": 100, "counter": true},
            "44300": { "name":"nibe_heat_meter_wh_total{sensor=\"EP14 heating cpr+add\"}", "factor": 1, "scale": 100, "counter": true},
            "44306": { "name":"nibe_heat_meter_wh_total{sensor=\"EP14 hotwater cpr\"}", "factor": 1, "scale": 100, "counter": true},
            "44298": { "name":"nibe_heat_meter_wh_total{sensor=\"EP14 hotwater cpr+add\"}", "factor": 1, "scale": 100, "counter": true},
            "44069": { "name":"nibe_compressor_starts_total{sensor=\"EB101-EP14\"}", "counter": true},
            "44071": { "name":"nibe_compressor_operating_time_seconds_total{sensor=\"EB101-EP14 total\"}", "scale": 3600, "counter": true},
            "44073": { "name":"nibe_compressor_operating_time_seconds_total{sensor=\"EB101-EP14 hotwater\"}", "scale": 3600, "counter": true},
            "40737": { "name":"nibe_compressor_operating_time_seconds_total{sensor=\"EB101-EP14 cooling\"}", "scale": 3600, "counter": true},

            // disabled
            "44775": { "name":"nibe_compressor_frequency_hertz{sensor=\"EB101 requested\"}"}
        },

        // Override/amend default Home Assistant MQTT discovery data.
        // Setting a value to null will remove the key from the discovery message.
        "homeassistantDiscoveryOverrides": {
            /*
            Default: see nibegw_config.cpp, <...> is taken from ModbusManager csv file
            Uses appreviations: https://www.home-assistant.io/integrations/mqtt/#mqtt-discovery
            _component_ is removed from mqtt discovery message but is part of the mqtt topic
            Read coils:
            {
                "_component_":"sensor", // MQTT integration like sensor, binary_sensor, switch, ...
                "obj_id":"nibegw-coil-<id>",
                "uniq_id":"nibegw-coil-<id>",
                "name":"<title>",
                "stat_t":"nibegw/coils/<id>",
                "unit_of_meas":"<unit>",
                "dev_cla":"temperature|duration|energy...", // depends on <unit>
                "stat_cla":"measurement|total",  // depends on <unit>
                "avty_t":"nibegw/availability",
                "dev":{"ids":["nibegw-<mac>"]}
            }
            */
            "43005": { // degree minutes (16bit), has no unit in csv
                "stat_cla":"measurement",
                "unit_of_meas": "GM"
            },
            "44703": { // defrosting, 0=No, 1=Active, 2 = Passive
               "dev_cla": "enum",
               "val_tpl": "{% set mapping = {'0':'Off','1':'Active','2':'Passive'} %}{{ mapping[value] if value in mapping.keys() else 'off' }}"
            }
        }
    },
    "logging": {
        "mqttLoggingEnabled": true,     // whether to log to mqtt
        "stdoutLoggingEnabled": true,   // whether to log to serial in addition to mqtt
        "logTopic": "nibegw/log",
        // see https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32/api-reference/system/log.html
        // cannot log above CONFIG_LOG_MAXIMUM_LEVEL
        "logLevels": {
            // "*" : "info", // change default log level
            "mqtt": "info",
            "nibegw_mqtt": "info"
        }
    }
}